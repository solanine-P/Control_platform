#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('hello:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// let io = require('socket.io').listen(server);
// io.on('connection', function(socket) {
//     socket.on('message',function(data){
//         var msg =decodeURI(data);
//         io.sockets.emit('message',msg);
//     })
// });

/**
 * Created by Ben on 2016/9/19.
 */
// let sendudp = require('../udpClient/udpclient').send;
// let UDPrecive = require('../udpClient/udpclient').recive;
//
// var io = require('socket.io')({
//     transports: ['websocket'],
// });
//
// io.attach(server);
//
// console.log('io');
//
// io.on('connection', function(socket){
//     //console.log('a user connected');
//     var iparray = socket.request.connection.remoteAddress.toString().split(':');
//     //socket.handshake.address
//     var socketinfo = {id: socket.id, ip: iparray[iparray.length - 1]};
//
//     console.log('a user connected : ' + JSON.stringify(socketinfo));
//     //socket.broadcast.emit('hi');
//
//     //socket.emit('chat message', "Hello Dude Your ip info is : " + JSON.stringify(socketinfo));
//
//     socket.on('disconnect', function () {
//         console.log('user disconnected : ' + JSON.stringify(socketinfo));
//     });
//
//     socket.on('message', function (msg) {
//         //io.emit('message', msg);
//         //socket.emit('boop',msg);
//         socket.broadcast.emit('message',msg);
//         sendudp(msg);
//         console.log('message: ' + msg);
//     });
// });
//
// UDPrecive.on('message',function(message,remote){
//     "use strict";
//     console.log(remote.address + ':' + remote.port +' - ' + message);
//     io.emit('message', message);
// });